from dronekit import connect, VehicleMode, LocationGlobalRelative
import time
import logging

# Initialize logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Constants
TARGET_ALTITUDE = 10  # Default takeoff altitude in meters
ARMING_TIMEOUT = 60  # Timeout for arming in seconds
TAKEOFF_TIMEOUT = 60  # Timeout for takeoff in seconds

# Connect to the vehicle
logging.info("Connecting to vehicle...")
vehicle = connect('127.0.0.1:14550', wait_ready=True)  # Replace with your drone's connection string
logging.info("Successfully connected to vehicle")

# Helper function to check vehicle status
def check_vehicle_status():
    """
    Checks the vehicle's current status and logs relevant information.
    """
    logging.debug(f"Vehicle mode: {vehicle.mode.name}")
    logging.debug(f"GPS fix: {vehicle.gps_0.fix_type}")
    logging.debug(f"Battery: {vehicle.battery.level}%")
    logging.debug(f"Is armable: {vehicle.is_armable}")
    logging.debug(f"Last heartbeat: {vehicle.last_heartbeat}")

# Helper function to wait for arming
def wait_for_arming(timeout=ARMING_TIMEOUT):
    """
    Waits for the vehicle to be armed within the specified timeout.
    """
    start_time = time.time()
    while not vehicle.armed:
        current_time = time.time()
        elapsed_time = current_time - start_time
        if elapsed_time > timeout:
            logging.error("Arming timeout exceeded")
            raise TimeoutError("Failed to arm vehicle within timeout period")
        logging.info(f"Waiting for arming... ({elapsed_time:.1f} seconds elapsed)")
        time.sleep(1)
    logging.info("Vehicle is armed")

# Helper function to wait for takeoff
def wait_for_takeoff(target_altitude, timeout=TAKEOFF_TIMEOUT):
    """
    Waits for the vehicle to reach the target altitude within the specified timeout.
    """
    start_time = time.time()
    while True:
        current_time = time.time()
        elapsed_time = current_time - start_time
        altitude = vehicle.location.global_relative_frame.alt
        if altitude >= target_altitude * 0.95:
            logging.info("Target altitude reached")
            break
        if elapsed_time > timeout:
            logging.error("Takeoff timeout exceeded")
            raise TimeoutError("Failed to reach target altitude within timeout period")
        logging.info(f"Current altitude: {altitude:.2f} meters ({elapsed_time:.1f} seconds elapsed)")
        time.sleep(1)

# Helper function to check GPS fix
def check_gps_fix():
    """
    Ensures the vehicle has a good GPS fix.
    """
    if vehicle.gps_0.fix_type < 2:
        logging.warning("No GPS fix. Ensure the vehicle is outdoors and has a clear view of the sky.")
        raise RuntimeError("No GPS fix")

# Helper function to check battery level
def check_battery_level(min_battery_level=20):
    """
    Checks the vehicle's battery level to ensure it is above the specified minimum.
    """
    if vehicle.battery.level < min_battery_level:
        logging.warning(f"Low battery: {vehicle.battery.level}%. Ensure the battery is sufficiently charged.")
        raise RuntimeError("Low battery level")

# Main function to arm and takeoff
def arm_and_takeoff(target_altitude=TARGET_ALTITUDE):
    """
    Arms the vehicle and takes off to the specified altitude.
    """
    logging.info("Starting arm and takeoff sequence")

    # Pre-arm checks
    logging.info("Performing pre-arm checks")
    check_vehicle_status()
    check_gps_fix()
    check_battery_level()

    # Arm the vehicle
    logging.info("Arming the vehicle")
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True
    wait_for_arming()

    # Takeoff
    logging.info(f"Taking off to {target_altitude} meters")
    vehicle.simple_takeoff(target_altitude)
    wait_for_takeoff(target_altitude)

    logging.info("Arm and takeoff sequence complete")

# Execute the arm and takeoff function
try:
    arm_and_takeoff()
except Exception as e:
    logging.error(f"Error during arm and takeoff: {e}")

# Disconnect from vehicle
logging.info("Disconnecting from vehicle")
vehicle.close()
logging.info("Vehicle disconnected")
